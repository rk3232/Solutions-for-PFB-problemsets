#!/usr/bin/env python3

#length of python string/seq
seq1 = 'GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCG'

#length of seq1
seq1_length = len(seq1)
print(f'for the sequence: {seq1}, the length is {seq1_length}') 

#find number of A, T, G, C
print(f"there are {seq1.count('A')} A's, {seq1.count('T')} T's, {seq1.count('G')} G's, and {seq1.count('C')} C's")

###
#rando string cases
bird = 'chicken'
print(f"{bird.upper()} is an aggressive {bird.lower()}")

###
#count nucleotide numbers regardless of case
seq2 = 'GATGGGATTggggttttccccTCCCATGTGCTCAAGACTGGCGCTaaaaGttttGAGCTTCTCaaaaGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCggggACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGccccCTCTGAGTCAGGAAACAttttCAGACCTATGGAAACTACTTCCTGaaaaCAACGTTCTGTccccCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTccccGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTccccCCGTGGccccTGCACCAGCAGCTCCTACACCGGCGGccccTGCACCAGccccCTCCTGGccccTGTCATCTTCTGTCCCTTCCCAGaaaaCCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTccccTGCCCTCAACAAGATGttttGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACAccccCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGccccCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGccccTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACttttCG'

#length of seq2
seq2_length = len(seq2)
seq2_A = (seq2.count('A') + seq2.count('a'))
seq2_T = (seq2.count('T') + seq2.count('t'))
seq2_G = (seq2.count('G') + seq2.count('g'))
seq2_C = (seq2.count('C') + seq2.count('c'))

#count and print
print(f"For {seq2}, length of {seq2_length}, there are {seq2_A} A's, {seq2_T} T's, {seq2_G} G's, and {seq2_C} C's.")

#other way, convert to all upper then print
SEQ2 = seq2.upper()

print(f"there are {SEQ2.count('A')} A's, {SEQ2.count('T')} T's, {SEQ2.count('G')} G's, and {SEQ2.count('C')} C's")

#compare methods to check
seq1_length = len(seq1)                     
seq1_A = seq1.count('A')
seq1_T = seq1.count('T')
seq1_G = seq1.count('G')
seq1_C = seq1.count('C')

SEQ2_length = len(SEQ2)    
SEQ2_A = SEQ2.count('A')
SEQ2_T = SEQ2.count('T')
SEQ2_G = SEQ2.count('G')
SEQ2_C = SEQ2.count('C')

#compare
if seq1_length == seq2_length == SEQ2_length:
	print("Length counts equal")
else:
	print("Length counts unequal")

if seq1_A == seq2_A == SEQ2_A:
	print("Equal A counts")
else:
	print("A counts unequal")


